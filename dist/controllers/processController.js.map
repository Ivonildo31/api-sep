{"version":3,"sources":["controllers/processController.ts"],"names":[],"mappings":"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","file":"controllers/processController.js","sourcesContent":["import moment from 'moment';\n\nimport pushConfig from '../config/push';\nimport sep from '../config/app';\n\nimport { DataFavorite } from '../services/data-favorite';\nimport { PushService } from '../services/push';\nimport { SepService } from '../services/sep';\n\nexport class ProcessController {\n    private processController = new Object();\n    private dataService = undefined;\n    private pushService = undefined;\n\n    constructor( private sepService: SepService = new SepService(), private dataFavorite: DataFavorite = new DataFavorite() ) {\n        this.pushService = new PushService( pushConfig.push_url, pushConfig.username, pushConfig.password );\n    }\n\n    private notFound( next ) {\n        const error = new Error( 'Processo não encontrado.' );\n        error.userMessage = error.message;\n        error.handled = true;\n        error.status = 404;\n        next( error );\n    }\n\n    private wrongNumber( next ) {\n        const error = new Error( 'O número do processo deve possuir apenas números e ter entre 2 e 8 dígitos.' );\n        error.userMessage = error.message;\n        error.handled = true;\n        error.status = 400;\n\n        return next( error );\n    }\n\n    public getSingle = ( req, res, next ) => {\n\n        const procNumber = req.params.number;\n\n        const mask = /^\\d{2,8}$/;\n        if ( !mask.test( procNumber ) ) {\n            return this.wrongNumber( next );\n        }\n\n        this.sepService.getDocumentInfo( procNumber )\n            .then( result => {\n                if ( !result || typeof result !== 'object' ) {\n                    throw new Error( 'Result not expected.' );\n                }\n\n                const p = result.ProcessoHistorico;\n\n                if ( !p.Interessado ) {\n                    return this.notFound( next );\n                }\n\n                const updates = p.Andamento.ProcessoLocalizacao.map( a => {\n                    return {\n                        date: moment( a.Data, 'DD/MM/YYYY HH:mm' ),\n                        agency: a.Orgao,\n                        area: a.Local,\n                        status: a.Situacao\n                    };\n                });\n\n                const info =\n                    {\n                        number: p.NumeroProcesso,\n                        parts: p.Interessado.string,\n                        subject: p.Assunto,\n                        summary: p.Resumo,\n                        status: p.Situacao,\n                        updates: updates,\n                        district: p.Municipio,\n                        extra: p.IdentificacoesDiversas,\n                        pageUrl: sep.url_web + p.NumeroProcesso\n                    };\n\n\n                return res.json( info );\n            })\n            .catch( err => {\n                next( err );\n            });\n    };\n\n    public update( req, res, next ) {\n        const data = req.body;\n\n        this.getUsersBySepProtocol( req, res, next )\n            .then( usersToPush => {\n                const message = `Processo ${data.number} atualizado`;\n                const state = 'app.sepConsulta/:processNumber';\n                const params = { processNumber: `${data.number}` };\n\n                return this.pushService.send( usersToPush, message, state, params );\n            })\n            .then(() => res.send( 'ok' ) )\n            .catch( error => next( error ) );\n    }\n\n    public saveFavorite( req, res, next ) {\n        const data = req.body;\n        data.id = parseInt( req.decodedToken.sub );\n        delete data.userId;\n\n        return this.dataFavorite.saveFavorite( data )\n            .then( data => res.send( data ) )\n            .catch( error => next( error ) );\n    }\n\n    public getFavorite( req, res, next ) {\n        const sub = parseInt( req.decodedToken.sub );\n\n        return this.dataFavorite.saveFavorite( sub )\n            .then( data => res.send( data ) )\n            .catch( error => next( error ) );\n    }\n\n    public getUsersBySepProtocol( req, res, next ) {\n        let number = parseInt( req.params.number );\n\n        return this.dataFavorite.getUsersBySepProtocol( number )\n            .then( data => res.send( data ) )\n            .catch( error => next( error ) );\n    }\n}\n"],"sourceRoot":"c:\\_gitHub\\prodest\\api-sep\\src\\"}
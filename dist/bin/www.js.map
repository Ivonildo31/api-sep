{"version":3,"sources":["bin/www.ts"],"names":[],"mappings":";;AAMA,8BAAyB;AACzB,mCAAqC;AACrC,2BAA6B;AAC7B,qCAAmC;AAEnC,IAAM,KAAK,GAAG,WAAW,CAAE,kBAAkB,CAAE,CAAC;AAEhD;;GAEG;AAEH,IAAM,aAAa,GAAG,UAAE,GAAG;IACvB,IAAI,IAAI,GAAG,QAAQ,CAAE,GAAG,EAAE,EAAE,CAAE,CAAC;IAE/B,EAAE,CAAC,CAAE,KAAK,CAAE,IAAI,CAAG,CAAC,CAAC,CAAC;QAClB,aAAa;QACb,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAED,EAAE,CAAC,CAAE,IAAI,IAAI,CAAE,CAAC,CAAC,CAAC;QACd,cAAc;QACd,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF;;GAEG;AAEH,IAAM,OAAO,GAAG,UAAE,KAAK;IACnB,EAAE,CAAC,CAAE,KAAK,CAAC,OAAO,KAAK,QAAS,CAAC,CAAC,CAAC;QAC/B,MAAM,KAAK,CAAC;IAChB,CAAC;IAED,IAAM,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;UAC/B,OAAO,GAAG,IAAI;UACd,OAAO,GAAG,IAAI,CAAC;IAErB,uDAAuD;IACvD,MAAM,CAAC,CAAE,KAAK,CAAC,IAAK,CAAC,CAAC,CAAC;QACvB,KAAK,QAAQ;YACT,OAAO,CAAC,KAAK,CAAE,IAAI,GAAG,+BAA+B,CAAE,CAAC;YACxD,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;YAClB,KAAK,CAAC;QACV,KAAK,YAAY;YACb,OAAO,CAAC,KAAK,CAAE,IAAI,GAAG,oBAAoB,CAAE,CAAC;YAC7C,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;YAClB,KAAK,CAAC;QACV;YACI,MAAM,KAAK,CAAC;IAChB,CAAC;AACL,CAAC,CAAC;AAEF;;GAEG;AAEH,IAAM,WAAW,GAAG;IAChB,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAC5B,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;UAC7B,OAAO,GAAG,IAAI;UACd,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,KAAK,CAAE,eAAe,GAAG,IAAI,CAAE,CAAC;IAChC,OAAO,CAAC,GAAG,CAAE,oBAAkB,IAAI,QAAK,CAAE,CAAC;AAC/C,CAAC,CAAC;AAEF;;GAEG;AAEH,IAAM,IAAI,GAAG,aAAa,CAAE,gBAAM,CAAC,IAAI,CAAE,CAAC;AAC1C,gBAAG,CAAC,GAAG,CAAE,MAAM,EAAE,IAAI,CAAE,CAAC;AAExB;;GAEG;AAEH,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAE,gBAAG,CAAE,CAAC;AAExC;;GAEG;AAEH,MAAM,CAAC,MAAM,CAAE,IAAI,CAAE,CAAC;AACtB,MAAM,CAAC,EAAE,CAAE,OAAO,EAAE,OAAO,CAAE,CAAC;AAC9B,MAAM,CAAC,EAAE,CAAE,WAAW,EAAE,WAAW,CAAE,CAAC","file":"bin/www.js","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nimport app from '../app';\nimport * as debugMudule from 'debug';\nimport * as http from 'http';\nimport config from '../config/app';\n\nconst debug = debugMudule( 'admin-app:server' );\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nconst normalizePort = ( val ) => {\n    var port = parseInt( val, 10 );\n\n    if ( isNaN( port ) ) {\n        // named pipe\n        return val;\n    }\n\n    if ( port >= 0 ) {\n        // port number\n        return port;\n    }\n\n    return false;\n};\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nconst onError = ( error ) => {\n    if ( error.syscall !== 'listen' ) {\n        throw error;\n    }\n\n    const bind = typeof port === 'string'\n        ? 'Pipe ' + port\n        : 'Port ' + port;\n\n    // handle specific listen errors with friendly messages\n    switch ( error.code ) {\n    case 'EACCES':\n        console.error( bind + ' requires elevated privileges' );\n        process.exit( 1 );\n        break;\n    case 'EADDRINUSE':\n        console.error( bind + ' is already in use' );\n        process.exit( 1 );\n        break;\n    default:\n        throw error;\n    }\n};\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nconst onListening = () => {\n    var addr = server.address();\n    var bind = typeof addr === 'string'\n        ? 'pipe ' + addr\n        : 'port ' + addr.port;\n    debug( 'Listening on ' + bind );\n    console.log( `\\nListening on ${bind}...` );\n};\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort( config.port );\napp.set( 'port', port );\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer( app );\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen( port );\nserver.on( 'error', onError );\nserver.on( 'listening', onListening );\n"],"sourceRoot":"c:\\_gitHub\\prodest\\api-sep\\src\\"}